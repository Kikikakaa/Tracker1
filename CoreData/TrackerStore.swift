import CoreData

protocol TrackerStoreDelegate: AnyObject {
    func didUpdateTrackers()
}

final class TrackerStore: NSObject {
    private let context: NSManagedObjectContext
    private let colorMarshalling = UIColorMarshalling()
    private lazy var fetchedResultsController: NSFetchedResultsController<TrackerCoreData> = {
        let request = TrackerCoreData.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "title", ascending: true)]
        
        let controller = NSFetchedResultsController(
            fetchRequest: request,
            managedObjectContext: context,
            sectionNameKeyPath: nil,
            cacheName: nil
        )
        controller.delegate = self
        return controller
    }()
    
    weak var delegate: TrackerStoreDelegate?
    
    init(context: NSManagedObjectContext) {
        self.context = context
        super.init()
        try? fetchedResultsController.performFetch()
    }
    
    // MARK: - CRUD
    func addTracker(_ tracker: Tracker, category: TrackerCategoryCoreData?) throws {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç—Ä–µ–∫–µ—Ä —Å —Ç–∞–∫–∏–º ID
        let existingRequest = TrackerCoreData.fetchRequest()
        existingRequest.predicate = NSPredicate(format: "id == %@", tracker.id as CVarArg)
        
        if let existingTracker = try context.fetch(existingRequest).first {
            print("‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä —Å ID \(tracker.id) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è")
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫–µ—Ä
            existingTracker.title = tracker.title
            existingTracker.emoji = tracker.emoji
            existingTracker.colorHex = colorMarshalling.hexString(from: tracker.color)
            existingTracker.category = category
            
            if let schedule = tracker.schedule {
                let encoder = JSONEncoder()
                do {
                    let scheduleData = try encoder.encode(schedule)
                    existingTracker.schedule = scheduleData
                } catch {
                    print("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error)")
                }
            }
            
            try context.save()
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        let trackerCoreData = TrackerCoreData(context: context)
        trackerCoreData.id = tracker.id
        trackerCoreData.title = tracker.title
        trackerCoreData.emoji = tracker.emoji
        trackerCoreData.colorHex = colorMarshalling.hexString(from: tracker.color)
        trackerCoreData.createdAt = Date()
        trackerCoreData.isPinned = false
        
        // –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if let schedule = tracker.schedule {
            let encoder = JSONEncoder()
            do {
                let scheduleData = try encoder.encode(schedule)
                trackerCoreData.schedule = scheduleData
            } catch {
                print("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error)")
            }
        }
        
        trackerCoreData.category = category
        
        try context.save()
        print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä —Å ID \(tracker.id)")
    }
    
    func fetchTrackers() throws -> [Tracker] {
        let request = TrackerCoreData.fetchRequest()
        let sortDescriptor = NSSortDescriptor(key: "createdAt", ascending: false)
        request.sortDescriptors = [sortDescriptor]
        
        let trackersCoreData = try context.fetch(request)
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
        var uniqueTrackers: [Tracker] = []
        var seenIds: Set<UUID> = []
        
        for coreData in trackersCoreData {
            guard let id = coreData.id,
                  let title = coreData.title,
                  let emoji = coreData.emoji,
                  let colorHex = coreData.colorHex else {
                continue
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if seenIds.contains(id) {
                print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –≤ Core Data —Å ID \(id), —É–¥–∞–ª—è–µ–º")
                context.delete(coreData)
                continue
            }
            seenIds.insert(id)
            
            let schedule: [Weekday]?
            if let scheduleData = coreData.schedule {
                schedule = try? JSONDecoder().decode([Weekday].self, from: scheduleData)
            } else {
                schedule = nil
            }
            
            let tracker = Tracker(
                id: id,
                title: title,
                color: colorMarshalling.color(from: colorHex),
                emoji: emoji,
                schedule: schedule
            )
            uniqueTrackers.append(tracker)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if context.hasChanges {
            try context.save()
        }
        
        return uniqueTrackers
    }
    
    func updateTracker(_ tracker: Tracker, in category: TrackerCategoryCoreData?) throws {
        let request = TrackerCoreData.fetchRequest()
        request.predicate = NSPredicate(format: "id == %@", tracker.id as CVarArg)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ –æ–¥–∏–Ω —Ç—Ä–µ–∫–µ—Ä
        let existingTrackers = try context.fetch(request)
        
        if existingTrackers.count > 1 {
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ \(existingTrackers.count) —Ç—Ä–µ–∫–µ—Ä–æ–≤ —Å ID \(tracker.id), —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã")
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
            for i in 1..<existingTrackers.count {
                context.delete(existingTrackers[i])
            }
        }
        
        if let trackerCoreData = existingTrackers.first {
            trackerCoreData.title = tracker.title
            trackerCoreData.emoji = tracker.emoji
            trackerCoreData.colorHex = colorMarshalling.hexString(from: tracker.color)
            
            if let schedule = tracker.schedule {
                let scheduleData = try? JSONEncoder().encode(schedule)
                trackerCoreData.schedule = scheduleData ?? Data()
            } else {
                trackerCoreData.schedule = Data()
            }
            
            trackerCoreData.category = category
            
            try context.save()
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫–µ—Ä —Å ID \(tracker.id)")
        } else {
            print("‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä —Å ID \(tracker.id) –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        }
    }
    
    func deleteTracker(_ id: UUID) throws {
        let request = TrackerCoreData.fetchRequest()
        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        
        let trackers = try context.fetch(request)
        
        if trackers.count > 1 {
            print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ \(trackers.count) —Ç—Ä–µ–∫–µ—Ä–æ–≤ —Å ID \(id) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã —Å —ç—Ç–∏–º ID
        for tracker in trackers {
            context.delete(tracker)
        }
        
        if !trackers.isEmpty {
            try context.save()
            print("‚úÖ –£–¥–∞–ª–µ–Ω–æ \(trackers.count) —Ç—Ä–µ–∫–µ—Ä–æ–≤ —Å ID \(id)")
        }
    }
    
    func cleanupDuplicates() throws {
        let request = TrackerCoreData.fetchRequest()
        let allTrackers = try context.fetch(request)
        
        var seenIds: Set<UUID> = []
        var duplicates: [TrackerCoreData] = []
        
        for tracker in allTrackers {
            guard let id = tracker.id else { continue }
            
            if seenIds.contains(id) {
                duplicates.append(tracker)
            } else {
                seenIds.insert(id)
            }
        }
        
        if !duplicates.isEmpty {
            print("üßπ –û—á–∏—Å—Ç–∫–∞ \(duplicates.count) –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç—Ä–µ–∫–µ—Ä–æ–≤")
            for duplicate in duplicates {
                context.delete(duplicate)
            }
            try context.save()
        }
    }
    
}

extension TrackerStore: NSFetchedResultsControllerDelegate {
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        delegate?.didUpdateTrackers()
    }
}

extension TrackerCoreData {
    func toTracker() -> Tracker? {
        guard let id = id,
              let title = title,
              let emoji = emoji,
              let colorHex = colorHex else {
            return nil
        }
        
        let schedule: [Weekday]?
        if let scheduleData = self.schedule as? Data {
            schedule = try? JSONDecoder().decode([Weekday].self, from: scheduleData)
        } else {
            schedule = nil
        }
        
        return Tracker(
            id: id,
            title: title,
            color: UIColorMarshalling().color(from: colorHex),
            emoji: emoji,
            schedule: schedule
        )
    }
}
